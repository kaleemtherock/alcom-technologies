generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String        @db.VarChar(255)
  description   String?
  instructorId  String        @map("instructor_id") @db.Uuid
  thumbnailUrl  String?       @map("thumbnail_url")
  duration      String?       @db.VarChar(100)
  totalLessons  Int?          @map("total_lessons")
  level         String?       @db.VarChar(50)
  price         Decimal?      @db.Decimal(10, 2)
  startDate     DateTime?     @map("start_date") @db.Timestamp(6)
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?     @default(now()) @map("updated_at") @db.Timestamp(6)
  status        CourseStatus? @default(DRAFT)
  prerequisites String[]
  skills        String[]
  assignments   Assignment[]
  chapters      Chapter[]
  instructor    User          @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollments   Enrollment[]

  @@map("courses")
}

model Chapter {
  id          String  @id @db.VarChar(50)
  courseId    String? @map("course_id") @db.Uuid
  title       String  @db.VarChar(255)
  description String?
  duration    String  @db.VarChar(50)
  orderIndex  Int     @map("order_index")
  course      Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  topics      Topic[]

  @@map("chapters")
}

model Topic {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chapterId  String?  @map("chapter_id") @db.VarChar(50)
  title      String   @db.VarChar(255)
  orderIndex Int      @map("order_index")
  chapter    Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("topics")
}

model User {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @db.VarChar(255)
  email       String       @unique @db.VarChar(255)
  password    String       @db.VarChar(255) // Add this field
  avatarUrl   String?      @map("avatar_url")
  role        UserRole
  createdAt   DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  courses     Course[]
  enrollments Enrollment[]
  submissions Submission[]

  @@map("users")
}

model Enrollment {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId       String?           @map("course_id") @db.Uuid
  userId         String?           @map("user_id") @db.Uuid
  enrolledAt     DateTime?         @default(now()) @map("enrolled_at") @db.Timestamp(6)
  status         EnrollmentStatus? @default(ACTIVE)
  completionRate Decimal?          @default(0) @map("completion_rate") @db.Decimal(5, 2)
  course         Course?           @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User?             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("enrollments")
}

model Assignment {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId    String?      @map("course_id") @db.Uuid
  title       String?      @db.VarChar(255)
  description String?
  dueDate     DateTime?    @map("due_date") @db.Timestamp(6)
  maxPoints   Int?         @map("max_points")
  createdAt   DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignmentId String?           @map("assignment_id") @db.Uuid
  userId       String?           @map("user_id") @db.Uuid
  submittedAt  DateTime?         @default(now()) @map("submitted_at") @db.Timestamp(6)
  files        Json?
  grade        Int?
  feedback     String?
  status       SubmissionStatus?
  assignment   Assignment?       @relation(fields: [assignmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User?             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("submissions")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum SubmissionStatus {
  SUBMITTED
  LATE
  GRADED
}
