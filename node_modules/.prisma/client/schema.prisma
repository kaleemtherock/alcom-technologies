generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  name             String
  email            String           @unique
  password         String
  role             Role             @default(STUDENT)
  enrollments      Enrollment[]
  messagesSent     ChatMessage[]    @relation("Sender")
  messagesReceived ChatMessage[]    @relation("Receiver")
  notebookEntries  NotebookEntry[]
  submissions      Submission[]
  certificates     Certificate[]
  examSubmissions  ExamSubmission[]
  payments         Payment[]
  preferences      UserPreferences?

  salesAgentId String?
  salesAgent   SalesAgent? @relation("ReferredUsers", fields: [salesAgentId], references: [id])

  commissionsAsUser Commission[] @relation("UserCommissions") // For the student referred
  createdAt         DateTime     @default(now())
}

model Course {
  id              String        @id @default(uuid())
  title           String
  description     String
  price           Float         @default(0.0)
  level           String
  duration        String
  topics          String[]
  difficultyLevel String?
  rating          Float         @default(0.0)
  lessons         Lesson[]
  enrollments     Enrollment[]
  assignments     Assignment[]
  exams           Exam[]
  certificates    Certificate[]
  payments        Payment[]
  commissions     Commission[]  @relation("CourseCommissions")
  createdAt       DateTime      @default(now())
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Float    @default(0.0)
  status    String   @default("active")
  createdAt DateTime @default(now())
}

model Lesson {
  id        String   @id @default(uuid())
  title     String
  content   String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Assignment {
  id          String       @id @default(uuid())
  title       String
  description String
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
  createdAt   DateTime     @default(now())
}

model Submission {
  id           String     @id @default(uuid())
  assignmentId String
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  student      User       @relation(fields: [studentId], references: [id])
  fileURL      String
  grade        Float?
  createdAt    DateTime   @default(now())
}

model Certificate {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  user     User     @relation(fields: [userId], references: [id])
  course   Course   @relation(fields: [courseId], references: [id])
  issuedAt DateTime @default(now())
}

model Exam {
  id           String           @id @default(uuid())
  courseId     String
  course       Course           @relation(fields: [courseId], references: [id])
  title        String
  description  String
  duration     Int
  passingScore Int
  questions    ExamQuestion[]
  submissions  ExamSubmission[]
  createdAt    DateTime         @default(now())
}

model ExamQuestion {
  id            String       @id @default(uuid())
  examId        String
  exam          Exam         @relation(fields: [examId], references: [id])
  question      String
  type          QuestionType
  options       Json?
  correctAnswer Json?
  createdAt     DateTime     @default(now())
}

model ExamSubmission {
  id        String   @id @default(uuid())
  studentId String
  examId    String
  student   User     @relation(fields: [studentId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])
  answers   Json
  score     Int?
  passed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  CODING
}

model ChatMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  message    String
  timestamp  DateTime @default(now())

  sender   User @relation(fields: [senderId], references: [id], name: "Sender")
  receiver User @relation(fields: [receiverId], references: [id], name: "Receiver")
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model NotebookEntry {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  notebookName String
  notebookPath String
  createdAt    DateTime @default(now())
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
  SALES_AGENT
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
}

model SalesAgent {
  id              String       @id @default(uuid())
  name            String
  email           String       @unique
  phone           String?
  referralCode    String       @unique
  status          String       @default("PENDING")
  commissionRate  Float        @default(0.1)
  commissions     Commission[]
  referredUsers   User[]       @relation("ReferredUsers")
  referredSchools School[]     @relation("ReferredSchools")
  createdAt       DateTime     @default(now())
}

model School {
  id           String      @id @default(uuid())
  name         String
  referredById String?
  referredBy   SalesAgent? @relation("ReferredSchools", fields: [referredById], references: [id])
  createdAt    DateTime    @default(now())
}

model Commission {
  id           String           @id @default(uuid())
  salesAgentId String
  userId       String
  courseId     String
  amount       Float
  status       CommissionStatus @default(PENDING)
  paidAt       DateTime?
  salesAgent   SalesAgent       @relation(fields: [salesAgentId], references: [id])
  user         User             @relation("UserCommissions", fields: [userId], references: [id])
  course       Course           @relation("CourseCommissions", fields: [courseId], references: [id])
  createdAt    DateTime         @default(now())

  @@index([salesAgentId])
  @@index([userId])
  @@index([courseId])
}

model UserPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  learningGoals    String[]
  experienceLevel  String
  preferredTopics  String[]
  timeCommitment   String
  careerObjectives String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
